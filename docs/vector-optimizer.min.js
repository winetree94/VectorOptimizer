(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["VectorOptimizer"] = factory();
	else
		root["VectorOptimizer"] = factory();
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./sample/drawer.ts":
/*!**************************!*\
  !*** ./sample/drawer.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Drawer = exports.PreprocessMode = exports.RenderMode = void 0;
/* eslint-disable no-case-declarations */
const curve_preprocess_sample_1 = __webpack_require__(/*! ../spec/vector-optimizer/curve-preprocess.sample */ "./spec/vector-optimizer/curve-preprocess.sample.ts");
const curve_fit_1 = __webpack_require__(/*! ../src/vertor-optimizer/curve-fit */ "./src/vertor-optimizer/curve-fit.ts");
const curve_preprocess_1 = __webpack_require__(/*! ../src/vertor-optimizer/curve-preprocess */ "./src/vertor-optimizer/curve-preprocess.ts");
const vector_1 = __webpack_require__(/*! ../src/vertor-optimizer/vector */ "./src/vertor-optimizer/vector.ts");
function getRandomColor() {
    const letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}
var RenderMode;
(function (RenderMode) {
    RenderMode["ORIGINAL_POINTS"] = "original-points";
    RenderMode["ORIGINAL_LINES"] = "original-lines";
    RenderMode["PREPROCESSED"] = "preprocessed";
    RenderMode["CONTROL_POINTS"] = "control-points";
    RenderMode["REPARAMATERIZED"] = "reparamaterized";
    RenderMode["FINAL_CURVES"] = "final-curves";
})(RenderMode = exports.RenderMode || (exports.RenderMode = {}));
var PreprocessMode;
(function (PreprocessMode) {
    PreprocessMode["NONE"] = "none";
    PreprocessMode["LINEARIZE"] = "linearize";
    PreprocessMode["RAMER_DOUGLAS_PEUCHER"] = "ramer-douglas-peucher";
})(PreprocessMode = exports.PreprocessMode || (exports.PreprocessMode = {}));
class Drawer {
    constructor(element) {
        this.element = element;
        this.originPoints = curve_preprocess_sample_1.SampleVertexes.slice(0);
        this._options = {
            preprocessMode: PreprocessMode.NONE,
            renderMode: RenderMode.ORIGINAL_POINTS,
            linearizePointDistance: 8,
            rdpError: 1,
            curveFittingError: 8,
            colorize: true,
        };
        element.addEventListener('pointerdown', this.onMouseDown.bind(this));
        element.addEventListener('mousedown', this.onMouseDown.bind(this));
        element.addEventListener('touchstart', (e) => e.preventDefault());
        this.render();
    }
    get options() {
        return this._options;
    }
    set options(options) {
        this._options = Object.assign(Object.assign({}, this._options), options);
        this.render();
    }
    onMouseDown(event) {
        event.preventDefault();
        this.clearOriginPoints();
        this.clearView();
        const startPoint = {
            x: event.offsetX,
            y: event.offsetY,
        };
        const $startCircle = this.createCircle(startPoint);
        this.element.appendChild($startCircle);
        this.originPoints.push(startPoint);
        const onMouseMove = (event) => {
            const point = {
                x: event.offsetX,
                y: event.offsetY,
            };
            const $circle = this.createCircle(point);
            this.element.appendChild($circle);
            this.originPoints.push(point);
        };
        const onMouseUp = () => {
            this.element.removeEventListener('pointermove', onMouseMove);
            this.element.removeEventListener('pointerup', onMouseUp);
            this.element.removeEventListener('mousemove', onMouseMove);
            this.element.removeEventListener('mouseup', onMouseUp);
            this.render();
        };
        this.element.addEventListener('mousemove', onMouseMove);
        this.element.addEventListener('mouseup', onMouseUp);
        this.element.addEventListener('pointermove', onMouseMove);
        this.element.addEventListener('pointerup', onMouseUp);
    }
    createCircle(point) {
        const $circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        $circle.setAttribute('cx', point.x.toString());
        $circle.setAttribute('cy', point.y.toString());
        $circle.setAttribute('r', (1).toString());
        $circle.setAttribute('fill', 'red');
        return $circle;
    }
    clearOriginPoints() {
        this.originPoints.splice(0);
    }
    clearView() {
        this.element.innerHTML = '';
    }
    transformToVector() {
        return this.originPoints.map((point) => vector_1.Vector.from(point));
    }
    getPreprocessedVectors() {
        switch (this.options.preprocessMode) {
            case PreprocessMode.NONE:
                return this.transformToVector();
            case PreprocessMode.LINEARIZE:
                return curve_preprocess_1.linearize(this.transformToVector(), this.options.linearizePointDistance);
            case PreprocessMode.RAMER_DOUGLAS_PEUCHER:
                return curve_preprocess_1.rdpReduce(this.transformToVector(), this.options.rdpError);
        }
    }
    render() {
        switch (this.options.renderMode) {
            case RenderMode.ORIGINAL_POINTS:
                this.clearView();
                this.originPoints.forEach((point) => {
                    const $circle = this.createCircle(point);
                    this.element.appendChild($circle);
                });
                break;
            case RenderMode.ORIGINAL_LINES:
                this.clearView();
                for (let i = 1; i < this.originPoints.length; i++) {
                    const previous = this.originPoints[i - 1];
                    const current = this.originPoints[i];
                    const $polyline = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');
                    $polyline.setAttribute('fill', 'none');
                    $polyline.setAttribute('stroke', this.options.colorize ? getRandomColor() : 'red');
                    $polyline.setAttribute('points', `${previous.x} ${previous.y} ${current.x}, ${current.y}`);
                    this.element.appendChild($polyline);
                }
                break;
            case RenderMode.PREPROCESSED:
                this.clearView();
                this.getPreprocessedVectors().forEach((vector) => {
                    const $circle = this.createCircle(vector);
                    this.element.appendChild($circle);
                });
                break;
            case RenderMode.FINAL_CURVES:
                this.clearView();
                const $path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                $path.setAttribute('fill', 'none');
                $path.setAttribute('stroke', 'red');
                const preproccessed = this.getPreprocessedVectors();
                const curveFit = new curve_fit_1.CurveFit(preproccessed);
                const cubicBeziers = curveFit.fit(this.options.curveFittingError);
                cubicBeziers.forEach((bezier) => {
                    const $path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                    $path.setAttribute('fill', 'none');
                    $path.setAttribute('stroke', this.options.colorize ? getRandomColor() : 'red');
                    $path.setAttribute('stroke-width', `${2}px`);
                    $path.setAttribute('d', `M ${bezier.p0.x} ${bezier.p0.y} C ${bezier.p1.x} ${bezier.p1.y} ${bezier.p2.x} ${bezier.p2.y} ${bezier.p3.x} ${bezier.p3.y}`);
                    this.element.appendChild($path);
                });
                break;
        }
    }
}
exports.Drawer = Drawer;


/***/ }),

/***/ "./spec/vector-optimizer/curve-preprocess.sample.ts":
/*!**********************************************************!*\
  !*** ./spec/vector-optimizer/curve-preprocess.sample.ts ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExpectedLinearizedSample = exports.SampleVertexes = void 0;
exports.SampleVertexes = [
    {
        x: 127,
        y: 152,
    },
    {
        x: 128,
        y: 151,
    },
    {
        x: 128,
        y: 150,
    },
    {
        x: 129,
        y: 149,
    },
    {
        x: 129,
        y: 148,
    },
    {
        x: 130,
        y: 148,
    },
    {
        x: 130,
        y: 147,
    },
    {
        x: 131,
        y: 146,
    },
    {
        x: 131,
        y: 145,
    },
    {
        x: 132,
        y: 145,
    },
    {
        x: 133,
        y: 144,
    },
    {
        x: 134,
        y: 143,
    },
    {
        x: 135,
        y: 143,
    },
    {
        x: 135,
        y: 142,
    },
    {
        x: 136,
        y: 142,
    },
    {
        x: 136,
        y: 141,
    },
    {
        x: 137,
        y: 141,
    },
    {
        x: 138,
        y: 141,
    },
    {
        x: 139,
        y: 140,
    },
    {
        x: 140,
        y: 140,
    },
    {
        x: 141,
        y: 139,
    },
    {
        x: 142,
        y: 139,
    },
    {
        x: 143,
        y: 138,
    },
    {
        x: 145,
        y: 138,
    },
    {
        x: 146,
        y: 138,
    },
    {
        x: 147,
        y: 137,
    },
    {
        x: 148,
        y: 137,
    },
    {
        x: 150,
        y: 137,
    },
    {
        x: 151,
        y: 136,
    },
    {
        x: 153,
        y: 136,
    },
    {
        x: 154,
        y: 136,
    },
    {
        x: 156,
        y: 136,
    },
    {
        x: 158,
        y: 136,
    },
    {
        x: 159,
        y: 136,
    },
    {
        x: 161,
        y: 135,
    },
    {
        x: 163,
        y: 135,
    },
    {
        x: 165,
        y: 135,
    },
    {
        x: 167,
        y: 135,
    },
    {
        x: 169,
        y: 135,
    },
    {
        x: 171,
        y: 135,
    },
    {
        x: 173,
        y: 135,
    },
    {
        x: 175,
        y: 135,
    },
    {
        x: 178,
        y: 135,
    },
    {
        x: 180,
        y: 135,
    },
    {
        x: 182,
        y: 136,
    },
    {
        x: 184,
        y: 136,
    },
    {
        x: 185,
        y: 136,
    },
    {
        x: 188,
        y: 137,
    },
    {
        x: 189,
        y: 137,
    },
    {
        x: 191,
        y: 138,
    },
    {
        x: 193,
        y: 139,
    },
    {
        x: 195,
        y: 139,
    },
    {
        x: 196,
        y: 140,
    },
    {
        x: 198,
        y: 141,
    },
    {
        x: 200,
        y: 142,
    },
    {
        x: 201,
        y: 142,
    },
    {
        x: 203,
        y: 143,
    },
    {
        x: 204,
        y: 144,
    },
    {
        x: 206,
        y: 145,
    },
    {
        x: 207,
        y: 147,
    },
    {
        x: 209,
        y: 148,
    },
    {
        x: 210,
        y: 149,
    },
    {
        x: 211,
        y: 150,
    },
    {
        x: 213,
        y: 151,
    },
    {
        x: 214,
        y: 153,
    },
    {
        x: 215,
        y: 154,
    },
    {
        x: 216,
        y: 155,
    },
    {
        x: 217,
        y: 157,
    },
    {
        x: 219,
        y: 158,
    },
    {
        x: 220,
        y: 159,
    },
    {
        x: 221,
        y: 161,
    },
    {
        x: 222,
        y: 162,
    },
    {
        x: 223,
        y: 164,
    },
    {
        x: 223,
        y: 165,
    },
    {
        x: 224,
        y: 167,
    },
    {
        x: 225,
        y: 168,
    },
    {
        x: 226,
        y: 170,
    },
    {
        x: 227,
        y: 171,
    },
    {
        x: 228,
        y: 173,
    },
    {
        x: 229,
        y: 175,
    },
    {
        x: 229,
        y: 176,
    },
    {
        x: 230,
        y: 178,
    },
    {
        x: 231,
        y: 180,
    },
    {
        x: 231,
        y: 182,
    },
    {
        x: 232,
        y: 184,
    },
    {
        x: 233,
        y: 186,
    },
    {
        x: 233,
        y: 188,
    },
    {
        x: 234,
        y: 189,
    },
    {
        x: 234,
        y: 191,
    },
    {
        x: 234,
        y: 193,
    },
    {
        x: 235,
        y: 195,
    },
    {
        x: 235,
        y: 197,
    },
    {
        x: 236,
        y: 198,
    },
    {
        x: 236,
        y: 200,
    },
    {
        x: 236,
        y: 202,
    },
    {
        x: 236,
        y: 204,
    },
    {
        x: 236,
        y: 205,
    },
    {
        x: 236,
        y: 207,
    },
    {
        x: 236,
        y: 208,
    },
    {
        x: 236,
        y: 210,
    },
    {
        x: 236,
        y: 212,
    },
    {
        x: 236,
        y: 213,
    },
    {
        x: 236,
        y: 214,
    },
    {
        x: 236,
        y: 216,
    },
    {
        x: 236,
        y: 217,
    },
    {
        x: 236,
        y: 219,
    },
    {
        x: 236,
        y: 220,
    },
    {
        x: 236,
        y: 221,
    },
    {
        x: 235,
        y: 222,
    },
    {
        x: 235,
        y: 223,
    },
    {
        x: 234,
        y: 224,
    },
    {
        x: 233,
        y: 225,
    },
    {
        x: 233,
        y: 226,
    },
    {
        x: 232,
        y: 227,
    },
    {
        x: 232,
        y: 228,
    },
    {
        x: 231,
        y: 229,
    },
    {
        x: 230,
        y: 229,
    },
    {
        x: 230,
        y: 230,
    },
    {
        x: 229,
        y: 231,
    },
    {
        x: 228,
        y: 231,
    },
    {
        x: 227,
        y: 232,
    },
    {
        x: 226,
        y: 232,
    },
    {
        x: 226,
        y: 233,
    },
    {
        x: 225,
        y: 233,
    },
    {
        x: 224,
        y: 234,
    },
    {
        x: 223,
        y: 234,
    },
    {
        x: 222,
        y: 234,
    },
    {
        x: 221,
        y: 234,
    },
    {
        x: 220,
        y: 234,
    },
    {
        x: 219,
        y: 234,
    },
    {
        x: 219,
        y: 235,
    },
    {
        x: 218,
        y: 235,
    },
    {
        x: 217,
        y: 235,
    },
    {
        x: 216,
        y: 235,
    },
    {
        x: 215,
        y: 235,
    },
    {
        x: 214,
        y: 235,
    },
    {
        x: 213,
        y: 235,
    },
    {
        x: 212,
        y: 235,
    },
    {
        x: 211,
        y: 235,
    },
    {
        x: 210,
        y: 235,
    },
    {
        x: 209,
        y: 234,
    },
    {
        x: 208,
        y: 234,
    },
    {
        x: 207,
        y: 234,
    },
    {
        x: 206,
        y: 233,
    },
    {
        x: 205,
        y: 233,
    },
    {
        x: 204,
        y: 233,
    },
    {
        x: 203,
        y: 232,
    },
    {
        x: 202,
        y: 232,
    },
    {
        x: 201,
        y: 231,
    },
    {
        x: 200,
        y: 231,
    },
    {
        x: 199,
        y: 231,
    },
    {
        x: 198,
        y: 230,
    },
    {
        x: 197,
        y: 230,
    },
    {
        x: 196,
        y: 229,
    },
    {
        x: 194,
        y: 229,
    },
    {
        x: 193,
        y: 228,
    },
    {
        x: 192,
        y: 228,
    },
    {
        x: 191,
        y: 227,
    },
    {
        x: 190,
        y: 226,
    },
    {
        x: 189,
        y: 226,
    },
    {
        x: 188,
        y: 225,
    },
    {
        x: 187,
        y: 225,
    },
    {
        x: 186,
        y: 224,
    },
    {
        x: 185,
        y: 224,
    },
    {
        x: 184,
        y: 223,
    },
    {
        x: 183,
        y: 222,
    },
    {
        x: 182,
        y: 221,
    },
    {
        x: 181,
        y: 221,
    },
    {
        x: 181,
        y: 220,
    },
    {
        x: 180,
        y: 220,
    },
    {
        x: 180,
        y: 219,
    },
    {
        x: 179,
        y: 219,
    },
    {
        x: 178,
        y: 218,
    },
    {
        x: 177,
        y: 217,
    },
    {
        x: 177,
        y: 216,
    },
    {
        x: 176,
        y: 215,
    },
    {
        x: 176,
        y: 214,
    },
    {
        x: 175,
        y: 214,
    },
    {
        x: 175,
        y: 213,
    },
    {
        x: 174,
        y: 212,
    },
    {
        x: 174,
        y: 211,
    },
    {
        x: 173,
        y: 210,
    },
    {
        x: 173,
        y: 209,
    },
    {
        x: 172,
        y: 208,
    },
    {
        x: 172,
        y: 207,
    },
    {
        x: 172,
        y: 206,
    },
    {
        x: 172,
        y: 205,
    },
    {
        x: 172,
        y: 204,
    },
    {
        x: 172,
        y: 203,
    },
    {
        x: 172,
        y: 202,
    },
    {
        x: 172,
        y: 201,
    },
    {
        x: 172,
        y: 200,
    },
    {
        x: 172,
        y: 199,
    },
    {
        x: 172,
        y: 198,
    },
    {
        x: 172,
        y: 197,
    },
    {
        x: 172,
        y: 196,
    },
    {
        x: 172,
        y: 195,
    },
    {
        x: 173,
        y: 194,
    },
    {
        x: 173,
        y: 193,
    },
    {
        x: 174,
        y: 192,
    },
    {
        x: 175,
        y: 191,
    },
    {
        x: 176,
        y: 191,
    },
    {
        x: 177,
        y: 190,
    },
    {
        x: 178,
        y: 190,
    },
    {
        x: 178,
        y: 189,
    },
    {
        x: 179,
        y: 189,
    },
    {
        x: 180,
        y: 189,
    },
    {
        x: 181,
        y: 188,
    },
    {
        x: 182,
        y: 188,
    },
    {
        x: 183,
        y: 188,
    },
    {
        x: 184,
        y: 188,
    },
    {
        x: 185,
        y: 187,
    },
    {
        x: 186,
        y: 187,
    },
    {
        x: 187,
        y: 187,
    },
    {
        x: 188,
        y: 187,
    },
    {
        x: 189,
        y: 187,
    },
    {
        x: 190,
        y: 187,
    },
    {
        x: 191,
        y: 187,
    },
    {
        x: 192,
        y: 187,
    },
    {
        x: 194,
        y: 187,
    },
    {
        x: 195,
        y: 187,
    },
    {
        x: 196,
        y: 187,
    },
    {
        x: 197,
        y: 187,
    },
    {
        x: 198,
        y: 187,
    },
    {
        x: 199,
        y: 187,
    },
    {
        x: 200,
        y: 187,
    },
    {
        x: 201,
        y: 187,
    },
    {
        x: 202,
        y: 187,
    },
    {
        x: 203,
        y: 188,
    },
    {
        x: 204,
        y: 188,
    },
    {
        x: 205,
        y: 188,
    },
    {
        x: 206,
        y: 189,
    },
    {
        x: 207,
        y: 189,
    },
    {
        x: 208,
        y: 190,
    },
    {
        x: 209,
        y: 190,
    },
    {
        x: 210,
        y: 191,
    },
    {
        x: 211,
        y: 191,
    },
    {
        x: 211,
        y: 192,
    },
    {
        x: 212,
        y: 193,
    },
    {
        x: 213,
        y: 193,
    },
    {
        x: 214,
        y: 194,
    },
    {
        x: 215,
        y: 195,
    },
    {
        x: 216,
        y: 196,
    },
    {
        x: 217,
        y: 197,
    },
    {
        x: 218,
        y: 198,
    },
    {
        x: 219,
        y: 199,
    },
    {
        x: 220,
        y: 200,
    },
    {
        x: 221,
        y: 201,
    },
    {
        x: 222,
        y: 202,
    },
    {
        x: 223,
        y: 203,
    },
    {
        x: 225,
        y: 204,
    },
    {
        x: 226,
        y: 206,
    },
    {
        x: 227,
        y: 207,
    },
    {
        x: 228,
        y: 208,
    },
    {
        x: 230,
        y: 209,
    },
    {
        x: 231,
        y: 211,
    },
    {
        x: 232,
        y: 212,
    },
    {
        x: 234,
        y: 213,
    },
    {
        x: 235,
        y: 214,
    },
    {
        x: 236,
        y: 216,
    },
    {
        x: 238,
        y: 217,
    },
    {
        x: 239,
        y: 218,
    },
    {
        x: 240,
        y: 219,
    },
    {
        x: 241,
        y: 220,
    },
    {
        x: 242,
        y: 221,
    },
    {
        x: 244,
        y: 223,
    },
    {
        x: 245,
        y: 224,
    },
    {
        x: 246,
        y: 225,
    },
    {
        x: 247,
        y: 226,
    },
    {
        x: 248,
        y: 226,
    },
    {
        x: 249,
        y: 228,
    },
    {
        x: 250,
        y: 229,
    },
    {
        x: 251,
        y: 230,
    },
    {
        x: 252,
        y: 231,
    },
    {
        x: 253,
        y: 232,
    },
    {
        x: 254,
        y: 234,
    },
    {
        x: 255,
        y: 234,
    },
    {
        x: 256,
        y: 235,
    },
    {
        x: 257,
        y: 236,
    },
    {
        x: 258,
        y: 237,
    },
    {
        x: 259,
        y: 238,
    },
    {
        x: 260,
        y: 239,
    },
    {
        x: 260,
        y: 240,
    },
    {
        x: 261,
        y: 241,
    },
    {
        x: 262,
        y: 242,
    },
    {
        x: 263,
        y: 243,
    },
    {
        x: 264,
        y: 244,
    },
    {
        x: 265,
        y: 245,
    },
    {
        x: 265,
        y: 246,
    },
    {
        x: 266,
        y: 247,
    },
    {
        x: 267,
        y: 247,
    },
    {
        x: 267,
        y: 248,
    },
    {
        x: 268,
        y: 249,
    },
    {
        x: 269,
        y: 250,
    },
    {
        x: 270,
        y: 251,
    },
    {
        x: 271,
        y: 252,
    },
    {
        x: 272,
        y: 253,
    },
    {
        x: 273,
        y: 254,
    },
    {
        x: 274,
        y: 255,
    },
    {
        x: 275,
        y: 256,
    },
    {
        x: 276,
        y: 257,
    },
    {
        x: 277,
        y: 257,
    },
    {
        x: 277,
        y: 258,
    },
    {
        x: 278,
        y: 259,
    },
    {
        x: 279,
        y: 259,
    },
    {
        x: 280,
        y: 260,
    },
    {
        x: 281,
        y: 260,
    },
    {
        x: 282,
        y: 261,
    },
    {
        x: 283,
        y: 262,
    },
    {
        x: 284,
        y: 262,
    },
    {
        x: 285,
        y: 263,
    },
    {
        x: 286,
        y: 263,
    },
    {
        x: 287,
        y: 263,
    },
    {
        x: 289,
        y: 264,
    },
    {
        x: 290,
        y: 264,
    },
    {
        x: 291,
        y: 265,
    },
    {
        x: 293,
        y: 265,
    },
    {
        x: 294,
        y: 266,
    },
    {
        x: 296,
        y: 266,
    },
    {
        x: 297,
        y: 267,
    },
    {
        x: 299,
        y: 267,
    },
    {
        x: 301,
        y: 268,
    },
    {
        x: 303,
        y: 268,
    },
    {
        x: 305,
        y: 269,
    },
    {
        x: 306,
        y: 269,
    },
    {
        x: 308,
        y: 270,
    },
    {
        x: 311,
        y: 270,
    },
    {
        x: 313,
        y: 270,
    },
    {
        x: 315,
        y: 271,
    },
    {
        x: 317,
        y: 271,
    },
    {
        x: 319,
        y: 271,
    },
    {
        x: 322,
        y: 272,
    },
    {
        x: 324,
        y: 272,
    },
    {
        x: 326,
        y: 272,
    },
    {
        x: 328,
        y: 272,
    },
    {
        x: 331,
        y: 272,
    },
    {
        x: 333,
        y: 272,
    },
    {
        x: 336,
        y: 272,
    },
    {
        x: 338,
        y: 272,
    },
    {
        x: 340,
        y: 272,
    },
    {
        x: 343,
        y: 272,
    },
    {
        x: 345,
        y: 272,
    },
    {
        x: 348,
        y: 272,
    },
    {
        x: 351,
        y: 272,
    },
    {
        x: 353,
        y: 272,
    },
    {
        x: 356,
        y: 272,
    },
    {
        x: 358,
        y: 272,
    },
    {
        x: 361,
        y: 272,
    },
    {
        x: 363,
        y: 272,
    },
    {
        x: 366,
        y: 272,
    },
    {
        x: 369,
        y: 272,
    },
    {
        x: 372,
        y: 272,
    },
    {
        x: 374,
        y: 272,
    },
    {
        x: 377,
        y: 272,
    },
    {
        x: 379,
        y: 272,
    },
    {
        x: 382,
        y: 272,
    },
    {
        x: 384,
        y: 272,
    },
    {
        x: 387,
        y: 272,
    },
    {
        x: 389,
        y: 272,
    },
    {
        x: 392,
        y: 271,
    },
    {
        x: 394,
        y: 271,
    },
    {
        x: 396,
        y: 271,
    },
    {
        x: 398,
        y: 270,
    },
    {
        x: 400,
        y: 270,
    },
    {
        x: 402,
        y: 270,
    },
    {
        x: 404,
        y: 269,
    },
    {
        x: 406,
        y: 269,
    },
    {
        x: 408,
        y: 269,
    },
    {
        x: 410,
        y: 268,
    },
    {
        x: 412,
        y: 268,
    },
    {
        x: 414,
        y: 267,
    },
    {
        x: 415,
        y: 267,
    },
    {
        x: 417,
        y: 266,
    },
    {
        x: 418,
        y: 266,
    },
    {
        x: 420,
        y: 265,
    },
    {
        x: 421,
        y: 265,
    },
    {
        x: 422,
        y: 264,
    },
    {
        x: 423,
        y: 264,
    },
    {
        x: 425,
        y: 263,
    },
    {
        x: 426,
        y: 263,
    },
    {
        x: 427,
        y: 262,
    },
    {
        x: 428,
        y: 262,
    },
    {
        x: 429,
        y: 261,
    },
    {
        x: 430,
        y: 260,
    },
    {
        x: 431,
        y: 260,
    },
    {
        x: 432,
        y: 259,
    },
    {
        x: 433,
        y: 259,
    },
    {
        x: 434,
        y: 258,
    },
    {
        x: 435,
        y: 257,
    },
    {
        x: 436,
        y: 257,
    },
    {
        x: 437,
        y: 256,
    },
    {
        x: 438,
        y: 255,
    },
    {
        x: 439,
        y: 254,
    },
    {
        x: 440,
        y: 253,
    },
    {
        x: 441,
        y: 252,
    },
    {
        x: 442,
        y: 252,
    },
    {
        x: 443,
        y: 251,
    },
    {
        x: 443,
        y: 250,
    },
    {
        x: 444,
        y: 249,
    },
    {
        x: 445,
        y: 249,
    },
    {
        x: 446,
        y: 248,
    },
    {
        x: 447,
        y: 247,
    },
    {
        x: 448,
        y: 246,
    },
    {
        x: 449,
        y: 245,
    },
    {
        x: 450,
        y: 244,
    },
    {
        x: 451,
        y: 244,
    },
    {
        x: 451,
        y: 243,
    },
    {
        x: 452,
        y: 242,
    },
    {
        x: 453,
        y: 241,
    },
    {
        x: 454,
        y: 241,
    },
    {
        x: 455,
        y: 240,
    },
    {
        x: 456,
        y: 239,
    },
    {
        x: 457,
        y: 238,
    },
    {
        x: 458,
        y: 237,
    },
    {
        x: 459,
        y: 237,
    },
    {
        x: 459,
        y: 236,
    },
    {
        x: 460,
        y: 235,
    },
    {
        x: 461,
        y: 234,
    },
    {
        x: 462,
        y: 233,
    },
    {
        x: 463,
        y: 232,
    },
    {
        x: 464,
        y: 231,
    },
    {
        x: 465,
        y: 230,
    },
    {
        x: 465,
        y: 229,
    },
    {
        x: 466,
        y: 228,
    },
    {
        x: 466,
        y: 227,
    },
    {
        x: 467,
        y: 226,
    },
    {
        x: 468,
        y: 225,
    },
    {
        x: 468,
        y: 224,
    },
    {
        x: 468,
        y: 223,
    },
    {
        x: 469,
        y: 222,
    },
    {
        x: 469,
        y: 221,
    },
    {
        x: 470,
        y: 220,
    },
    {
        x: 470,
        y: 219,
    },
    {
        x: 470,
        y: 218,
    },
    {
        x: 471,
        y: 217,
    },
    {
        x: 471,
        y: 216,
    },
    {
        x: 471,
        y: 215,
    },
    {
        x: 472,
        y: 214,
    },
    {
        x: 472,
        y: 213,
    },
    {
        x: 472,
        y: 212,
    },
    {
        x: 472,
        y: 211,
    },
    {
        x: 472,
        y: 210,
    },
    {
        x: 472,
        y: 209,
    },
    {
        x: 472,
        y: 208,
    },
    {
        x: 472,
        y: 207,
    },
    {
        x: 472,
        y: 206,
    },
    {
        x: 472,
        y: 205,
    },
    {
        x: 472,
        y: 204,
    },
    {
        x: 472,
        y: 203,
    },
    {
        x: 472,
        y: 202,
    },
    {
        x: 472,
        y: 201,
    },
    {
        x: 472,
        y: 200,
    },
    {
        x: 472,
        y: 199,
    },
    {
        x: 472,
        y: 198,
    },
    {
        x: 472,
        y: 197,
    },
    {
        x: 472,
        y: 196,
    },
    {
        x: 472,
        y: 195,
    },
    {
        x: 472,
        y: 194,
    },
    {
        x: 471,
        y: 193,
    },
    {
        x: 470,
        y: 192,
    },
    {
        x: 470,
        y: 191,
    },
    {
        x: 469,
        y: 190,
    },
    {
        x: 468,
        y: 188,
    },
    {
        x: 467,
        y: 187,
    },
    {
        x: 467,
        y: 186,
    },
    {
        x: 466,
        y: 185,
    },
    {
        x: 465,
        y: 184,
    },
    {
        x: 464,
        y: 183,
    },
    {
        x: 463,
        y: 182,
    },
    {
        x: 462,
        y: 181,
    },
    {
        x: 461,
        y: 180,
    },
    {
        x: 460,
        y: 178,
    },
    {
        x: 458,
        y: 177,
    },
    {
        x: 457,
        y: 176,
    },
    {
        x: 456,
        y: 175,
    },
    {
        x: 454,
        y: 174,
    },
    {
        x: 453,
        y: 173,
    },
    {
        x: 452,
        y: 172,
    },
    {
        x: 450,
        y: 172,
    },
    {
        x: 449,
        y: 171,
    },
    {
        x: 447,
        y: 170,
    },
    {
        x: 446,
        y: 169,
    },
    {
        x: 445,
        y: 169,
    },
    {
        x: 443,
        y: 168,
    },
    {
        x: 441,
        y: 168,
    },
    {
        x: 440,
        y: 167,
    },
    {
        x: 439,
        y: 167,
    },
    {
        x: 437,
        y: 167,
    },
    {
        x: 436,
        y: 167,
    },
    {
        x: 434,
        y: 166,
    },
    {
        x: 433,
        y: 166,
    },
    {
        x: 431,
        y: 166,
    },
    {
        x: 430,
        y: 166,
    },
    {
        x: 428,
        y: 166,
    },
    {
        x: 427,
        y: 166,
    },
    {
        x: 425,
        y: 166,
    },
    {
        x: 423,
        y: 166,
    },
    {
        x: 422,
        y: 166,
    },
    {
        x: 421,
        y: 166,
    },
    {
        x: 419,
        y: 166,
    },
    {
        x: 418,
        y: 166,
    },
    {
        x: 416,
        y: 166,
    },
    {
        x: 415,
        y: 167,
    },
    {
        x: 414,
        y: 167,
    },
    {
        x: 412,
        y: 167,
    },
    {
        x: 411,
        y: 168,
    },
    {
        x: 410,
        y: 168,
    },
    {
        x: 409,
        y: 168,
    },
    {
        x: 408,
        y: 169,
    },
    {
        x: 406,
        y: 169,
    },
    {
        x: 405,
        y: 170,
    },
    {
        x: 404,
        y: 170,
    },
    {
        x: 403,
        y: 171,
    },
    {
        x: 402,
        y: 171,
    },
    {
        x: 401,
        y: 172,
    },
    {
        x: 400,
        y: 172,
    },
    {
        x: 399,
        y: 173,
    },
    {
        x: 398,
        y: 173,
    },
    {
        x: 397,
        y: 174,
    },
    {
        x: 395,
        y: 174,
    },
    {
        x: 394,
        y: 175,
    },
    {
        x: 393,
        y: 176,
    },
    {
        x: 392,
        y: 176,
    },
    {
        x: 391,
        y: 177,
    },
    {
        x: 390,
        y: 177,
    },
    {
        x: 389,
        y: 178,
    },
    {
        x: 388,
        y: 179,
    },
    {
        x: 386,
        y: 180,
    },
    {
        x: 385,
        y: 180,
    },
    {
        x: 384,
        y: 181,
    },
    {
        x: 383,
        y: 182,
    },
    {
        x: 382,
        y: 182,
    },
    {
        x: 381,
        y: 183,
    },
    {
        x: 380,
        y: 184,
    },
    {
        x: 379,
        y: 185,
    },
    {
        x: 379,
        y: 186,
    },
    {
        x: 378,
        y: 186,
    },
    {
        x: 377,
        y: 187,
    },
    {
        x: 376,
        y: 188,
    },
    {
        x: 375,
        y: 189,
    },
    {
        x: 374,
        y: 190,
    },
    {
        x: 374,
        y: 191,
    },
    {
        x: 373,
        y: 192,
    },
    {
        x: 373,
        y: 193,
    },
    {
        x: 372,
        y: 193,
    },
    {
        x: 372,
        y: 194,
    },
    {
        x: 371,
        y: 195,
    },
    {
        x: 371,
        y: 196,
    },
    {
        x: 371,
        y: 197,
    },
    {
        x: 370,
        y: 197,
    },
    {
        x: 370,
        y: 198,
    },
    {
        x: 370,
        y: 199,
    },
    {
        x: 370,
        y: 200,
    },
    {
        x: 369,
        y: 201,
    },
    {
        x: 369,
        y: 202,
    },
    {
        x: 369,
        y: 203,
    },
    {
        x: 369,
        y: 204,
    },
    {
        x: 369,
        y: 205,
    },
    {
        x: 369,
        y: 206,
    },
    {
        x: 368,
        y: 207,
    },
    {
        x: 368,
        y: 208,
    },
    {
        x: 368,
        y: 209,
    },
    {
        x: 368,
        y: 210,
    },
    {
        x: 368,
        y: 211,
    },
    {
        x: 368,
        y: 212,
    },
    {
        x: 368,
        y: 214,
    },
    {
        x: 368,
        y: 216,
    },
    {
        x: 368,
        y: 217,
    },
    {
        x: 368,
        y: 218,
    },
    {
        x: 369,
        y: 220,
    },
    {
        x: 369,
        y: 221,
    },
    {
        x: 369,
        y: 222,
    },
    {
        x: 369,
        y: 223,
    },
    {
        x: 370,
        y: 225,
    },
    {
        x: 370,
        y: 226,
    },
    {
        x: 370,
        y: 227,
    },
    {
        x: 370,
        y: 228,
    },
    {
        x: 371,
        y: 231,
    },
    {
        x: 371,
        y: 232,
    },
    {
        x: 372,
        y: 233,
    },
    {
        x: 372,
        y: 234,
    },
    {
        x: 372,
        y: 235,
    },
    {
        x: 373,
        y: 236,
    },
    {
        x: 373,
        y: 237,
    },
    {
        x: 374,
        y: 240,
    },
    {
        x: 374,
        y: 241,
    },
    {
        x: 374,
        y: 242,
    },
    {
        x: 375,
        y: 243,
    },
    {
        x: 375,
        y: 244,
    },
    {
        x: 376,
        y: 245,
    },
    {
        x: 376,
        y: 246,
    },
    {
        x: 377,
        y: 248,
    },
    {
        x: 377,
        y: 249,
    },
    {
        x: 378,
        y: 250,
    },
    {
        x: 378,
        y: 251,
    },
    {
        x: 379,
        y: 252,
    },
    {
        x: 380,
        y: 252,
    },
    {
        x: 380,
        y: 253,
    },
    {
        x: 381,
        y: 254,
    },
    {
        x: 382,
        y: 256,
    },
    {
        x: 383,
        y: 257,
    },
    {
        x: 383,
        y: 258,
    },
    {
        x: 384,
        y: 258,
    },
    {
        x: 384,
        y: 259,
    },
    {
        x: 385,
        y: 260,
    },
    {
        x: 386,
        y: 261,
    },
    {
        x: 386,
        y: 262,
    },
    {
        x: 387,
        y: 263,
    },
    {
        x: 388,
        y: 264,
    },
    {
        x: 389,
        y: 265,
    },
    {
        x: 389,
        y: 266,
    },
    {
        x: 390,
        y: 267,
    },
    {
        x: 390,
        y: 268,
    },
    {
        x: 391,
        y: 268,
    },
    {
        x: 392,
        y: 270,
    },
    {
        x: 393,
        y: 271,
    },
    {
        x: 394,
        y: 272,
    },
    {
        x: 394,
        y: 273,
    },
    {
        x: 395,
        y: 273,
    },
    {
        x: 395,
        y: 274,
    },
    {
        x: 396,
        y: 275,
    },
    {
        x: 397,
        y: 276,
    },
    {
        x: 397,
        y: 277,
    },
    {
        x: 398,
        y: 277,
    },
    {
        x: 398,
        y: 278,
    },
    {
        x: 398,
        y: 279,
    },
    {
        x: 399,
        y: 279,
    },
    {
        x: 399,
        y: 281,
    },
    {
        x: 400,
        y: 282,
    },
    {
        x: 400,
        y: 283,
    },
    {
        x: 401,
        y: 284,
    },
    {
        x: 401,
        y: 285,
    },
    {
        x: 401,
        y: 286,
    },
    {
        x: 402,
        y: 287,
    },
    {
        x: 402,
        y: 288,
    },
    {
        x: 402,
        y: 290,
    },
    {
        x: 402,
        y: 291,
    },
    {
        x: 403,
        y: 292,
    },
    {
        x: 403,
        y: 293,
    },
    {
        x: 403,
        y: 295,
    },
    {
        x: 403,
        y: 297,
    },
    {
        x: 404,
        y: 298,
    },
    {
        x: 404,
        y: 299,
    },
    {
        x: 404,
        y: 301,
    },
    {
        x: 404,
        y: 303,
    },
    {
        x: 404,
        y: 305,
    },
    {
        x: 404,
        y: 306,
    },
    {
        x: 404,
        y: 308,
    },
    {
        x: 405,
        y: 310,
    },
    {
        x: 405,
        y: 313,
    },
    {
        x: 405,
        y: 314,
    },
    {
        x: 405,
        y: 316,
    },
    {
        x: 405,
        y: 317,
    },
    {
        x: 405,
        y: 319,
    },
    {
        x: 405,
        y: 322,
    },
    {
        x: 405,
        y: 324,
    },
    {
        x: 404,
        y: 325,
    },
    {
        x: 404,
        y: 327,
    },
    {
        x: 403,
        y: 330,
    },
    {
        x: 402,
        y: 332,
    },
    {
        x: 402,
        y: 333,
    },
    {
        x: 401,
        y: 335,
    },
    {
        x: 400,
        y: 338,
    },
    {
        x: 399,
        y: 340,
    },
    {
        x: 398,
        y: 341,
    },
    {
        x: 396,
        y: 344,
    },
    {
        x: 395,
        y: 346,
    },
    {
        x: 394,
        y: 347,
    },
    {
        x: 394,
        y: 349,
    },
    {
        x: 392,
        y: 352,
    },
    {
        x: 391,
        y: 354,
    },
    {
        x: 390,
        y: 355,
    },
    {
        x: 388,
        y: 358,
    },
    {
        x: 387,
        y: 359,
    },
    {
        x: 386,
        y: 361,
    },
    {
        x: 385,
        y: 362,
    },
    {
        x: 383,
        y: 365,
    },
    {
        x: 382,
        y: 366,
    },
    {
        x: 381,
        y: 368,
    },
    {
        x: 378,
        y: 371,
    },
    {
        x: 377,
        y: 372,
    },
    {
        x: 376,
        y: 373,
    },
    {
        x: 374,
        y: 375,
    },
    {
        x: 373,
        y: 377,
    },
    {
        x: 372,
        y: 378,
    },
    {
        x: 370,
        y: 379,
    },
    {
        x: 369,
        y: 380,
    },
    {
        x: 368,
        y: 381,
    },
    {
        x: 367,
        y: 382,
    },
    {
        x: 365,
        y: 384,
    },
    {
        x: 364,
        y: 384,
    },
    {
        x: 364,
        y: 385,
    },
    {
        x: 362,
        y: 386,
    },
    {
        x: 361,
        y: 387,
    },
    {
        x: 360,
        y: 388,
    },
    {
        x: 358,
        y: 389,
    },
    {
        x: 357,
        y: 389,
    },
    {
        x: 356,
        y: 390,
    },
    {
        x: 355,
        y: 391,
    },
    {
        x: 354,
        y: 392,
    },
    {
        x: 353,
        y: 393,
    },
    {
        x: 352,
        y: 393,
    },
    {
        x: 351,
        y: 395,
    },
    {
        x: 350,
        y: 395,
    },
    {
        x: 349,
        y: 396,
    },
    {
        x: 347,
        y: 397,
    },
    {
        x: 346,
        y: 398,
    },
    {
        x: 345,
        y: 398,
    },
    {
        x: 343,
        y: 399,
    },
    {
        x: 342,
        y: 400,
    },
    {
        x: 341,
        y: 401,
    },
    {
        x: 339,
        y: 402,
    },
    {
        x: 338,
        y: 402,
    },
    {
        x: 336,
        y: 403,
    },
    {
        x: 335,
        y: 404,
    },
    {
        x: 334,
        y: 404,
    },
    {
        x: 332,
        y: 406,
    },
    {
        x: 330,
        y: 406,
    },
    {
        x: 329,
        y: 406,
    },
    {
        x: 327,
        y: 407,
    },
    {
        x: 326,
        y: 408,
    },
    {
        x: 324,
        y: 409,
    },
    {
        x: 323,
        y: 409,
    },
    {
        x: 321,
        y: 410,
    },
    {
        x: 319,
        y: 410,
    },
    {
        x: 317,
        y: 411,
    },
    {
        x: 315,
        y: 411,
    },
    {
        x: 314,
        y: 411,
    },
    {
        x: 313,
        y: 411,
    },
    {
        x: 310,
        y: 412,
    },
    {
        x: 309,
        y: 412,
    },
    {
        x: 307,
        y: 412,
    },
    {
        x: 306,
        y: 412,
    },
    {
        x: 304,
        y: 413,
    },
    {
        x: 302,
        y: 413,
    },
    {
        x: 301,
        y: 413,
    },
    {
        x: 299,
        y: 413,
    },
    {
        x: 298,
        y: 413,
    },
    {
        x: 297,
        y: 413,
    },
    {
        x: 295,
        y: 413,
    },
    {
        x: 293,
        y: 413,
    },
    {
        x: 292,
        y: 413,
    },
    {
        x: 290,
        y: 413,
    },
    {
        x: 289,
        y: 413,
    },
    {
        x: 287,
        y: 413,
    },
    {
        x: 286,
        y: 413,
    },
    {
        x: 285,
        y: 413,
    },
    {
        x: 282,
        y: 413,
    },
    {
        x: 281,
        y: 413,
    },
    {
        x: 279,
        y: 412,
    },
    {
        x: 277,
        y: 412,
    },
    {
        x: 276,
        y: 412,
    },
    {
        x: 274,
        y: 411,
    },
    {
        x: 272,
        y: 411,
    },
    {
        x: 270,
        y: 411,
    },
    {
        x: 269,
        y: 410,
    },
    {
        x: 266,
        y: 410,
    },
    {
        x: 265,
        y: 409,
    },
    {
        x: 263,
        y: 409,
    },
    {
        x: 261,
        y: 409,
    },
    {
        x: 259,
        y: 408,
    },
    {
        x: 258,
        y: 408,
    },
    {
        x: 255,
        y: 408,
    },
    {
        x: 253,
        y: 407,
    },
    {
        x: 252,
        y: 407,
    },
    {
        x: 249,
        y: 406,
    },
    {
        x: 248,
        y: 406,
    },
    {
        x: 245,
        y: 406,
    },
    {
        x: 244,
        y: 405,
    },
    {
        x: 242,
        y: 405,
    },
    {
        x: 240,
        y: 404,
    },
    {
        x: 237,
        y: 403,
    },
    {
        x: 236,
        y: 403,
    },
    {
        x: 234,
        y: 402,
    },
    {
        x: 232,
        y: 401,
    },
    {
        x: 229,
        y: 400,
    },
    {
        x: 228,
        y: 400,
    },
    {
        x: 225,
        y: 398,
    },
    {
        x: 224,
        y: 398,
    },
    {
        x: 221,
        y: 397,
    },
    {
        x: 220,
        y: 396,
    },
    {
        x: 219,
        y: 395,
    },
    {
        x: 216,
        y: 394,
    },
    {
        x: 215,
        y: 393,
    },
    {
        x: 212,
        y: 392,
    },
    {
        x: 211,
        y: 391,
    },
    {
        x: 209,
        y: 390,
    },
    {
        x: 208,
        y: 390,
    },
    {
        x: 205,
        y: 389,
    },
    {
        x: 204,
        y: 388,
    },
    {
        x: 202,
        y: 387,
    },
    {
        x: 200,
        y: 386,
    },
    {
        x: 199,
        y: 385,
    },
    {
        x: 197,
        y: 384,
    },
    {
        x: 196,
        y: 384,
    },
    {
        x: 194,
        y: 383,
    },
    {
        x: 193,
        y: 382,
    },
    {
        x: 191,
        y: 381,
    },
    {
        x: 190,
        y: 381,
    },
    {
        x: 188,
        y: 380,
    },
    {
        x: 188,
        y: 379,
    },
    {
        x: 186,
        y: 378,
    },
    {
        x: 185,
        y: 378,
    },
    {
        x: 183,
        y: 377,
    },
    {
        x: 183,
        y: 376,
    },
    {
        x: 181,
        y: 375,
    },
    {
        x: 180,
        y: 375,
    },
    {
        x: 179,
        y: 373,
    },
    {
        x: 178,
        y: 373,
    },
    {
        x: 177,
        y: 372,
    },
    {
        x: 176,
        y: 371,
    },
    {
        x: 176,
        y: 370,
    },
    {
        x: 175,
        y: 370,
    },
    {
        x: 174,
        y: 369,
    },
    {
        x: 173,
        y: 368,
    },
    {
        x: 172,
        y: 367,
    },
    {
        x: 171,
        y: 367,
    },
    {
        x: 170,
        y: 365,
    },
    {
        x: 169,
        y: 364,
    },
    {
        x: 168,
        y: 363,
    },
    {
        x: 167,
        y: 362,
    },
    {
        x: 166,
        y: 361,
    },
    {
        x: 165,
        y: 360,
    },
    {
        x: 165,
        y: 359,
    },
    {
        x: 164,
        y: 358,
    },
    {
        x: 163,
        y: 357,
    },
    {
        x: 163,
        y: 356,
    },
    {
        x: 162,
        y: 355,
    },
    {
        x: 161,
        y: 354,
    },
    {
        x: 160,
        y: 353,
    },
    {
        x: 160,
        y: 352,
    },
    {
        x: 159,
        y: 351,
    },
    {
        x: 159,
        y: 350,
    },
    {
        x: 158,
        y: 349,
    },
    {
        x: 157,
        y: 348,
    },
    {
        x: 157,
        y: 346,
    },
    {
        x: 156,
        y: 345,
    },
    {
        x: 156,
        y: 344,
    },
    {
        x: 155,
        y: 342,
    },
    {
        x: 155,
        y: 341,
    },
    {
        x: 154,
        y: 340,
    },
    {
        x: 154,
        y: 339,
    },
    {
        x: 153,
        y: 337,
    },
    {
        x: 153,
        y: 335,
    },
    {
        x: 152,
        y: 335,
    },
    {
        x: 152,
        y: 333,
    },
    {
        x: 151,
        y: 332,
    },
    {
        x: 151,
        y: 330,
    },
    {
        x: 150,
        y: 330,
    },
    {
        x: 150,
        y: 328,
    },
    {
        x: 149,
        y: 326,
    },
    {
        x: 149,
        y: 325,
    },
    {
        x: 149,
        y: 324,
    },
    {
        x: 149,
        y: 322,
    },
    {
        x: 148,
        y: 321,
    },
    {
        x: 148,
        y: 320,
    },
    {
        x: 148,
        y: 319,
    },
    {
        x: 148,
        y: 317,
    },
    {
        x: 147,
        y: 316,
    },
    {
        x: 147,
        y: 315,
    },
    {
        x: 147,
        y: 314,
    },
    {
        x: 147,
        y: 313,
    },
    {
        x: 147,
        y: 312,
    },
    {
        x: 147,
        y: 311,
    },
    {
        x: 147,
        y: 310,
    },
    {
        x: 147,
        y: 309,
    },
    {
        x: 147,
        y: 307,
    },
    {
        x: 147,
        y: 306,
    },
    {
        x: 147,
        y: 305,
    },
    {
        x: 147,
        y: 304,
    },
    {
        x: 147,
        y: 303,
    },
    {
        x: 147,
        y: 302,
    },
    {
        x: 147,
        y: 301,
    },
    {
        x: 147,
        y: 300,
    },
    {
        x: 147,
        y: 299,
    },
    {
        x: 147,
        y: 298,
    },
    {
        x: 148,
        y: 298,
    },
    {
        x: 148,
        y: 297,
    },
    {
        x: 148,
        y: 296,
    },
    {
        x: 148,
        y: 295,
    },
    {
        x: 149,
        y: 295,
    },
    {
        x: 149,
        y: 294,
    },
    {
        x: 149,
        y: 293,
    },
    {
        x: 149,
        y: 292,
    },
    {
        x: 150,
        y: 292,
    },
    {
        x: 150,
        y: 291,
    },
    {
        x: 151,
        y: 291,
    },
    {
        x: 152,
        y: 291,
    },
    {
        x: 152,
        y: 292,
    },
    {
        x: 153,
        y: 292,
    },
    {
        x: 154,
        y: 293,
    },
    {
        x: 154,
        y: 294,
    },
    {
        x: 156,
        y: 294,
    },
    {
        x: 157,
        y: 295,
    },
    {
        x: 159,
        y: 297,
    },
    {
        x: 162,
        y: 298,
    },
    {
        x: 165,
        y: 300,
    },
    {
        x: 167,
        y: 301,
    },
    {
        x: 172,
        y: 303,
    },
    {
        x: 175,
        y: 304,
    },
    {
        x: 180,
        y: 306,
    },
    {
        x: 184,
        y: 307,
    },
    {
        x: 190,
        y: 309,
    },
    {
        x: 196,
        y: 311,
    },
    {
        x: 200,
        y: 312,
    },
    {
        x: 207,
        y: 313,
    },
    {
        x: 214,
        y: 315,
    },
    {
        x: 218,
        y: 316,
    },
    {
        x: 225,
        y: 317,
    },
    {
        x: 232,
        y: 318,
    },
    {
        x: 236,
        y: 319,
    },
    {
        x: 242,
        y: 320,
    },
    {
        x: 247,
        y: 321,
    },
    {
        x: 252,
        y: 322,
    },
    {
        x: 255,
        y: 323,
    },
    {
        x: 257,
        y: 323,
    },
    {
        x: 259,
        y: 324,
    },
    {
        x: 261,
        y: 324,
    },
    {
        x: 263,
        y: 325,
    },
    {
        x: 265,
        y: 325,
    },
    {
        x: 266,
        y: 325,
    },
    {
        x: 268,
        y: 325,
    },
    {
        x: 269,
        y: 325,
    },
    {
        x: 270,
        y: 326,
    },
    {
        x: 271,
        y: 326,
    },
    {
        x: 272,
        y: 326,
    },
    {
        x: 273,
        y: 326,
    },
    {
        x: 274,
        y: 326,
    },
    {
        x: 275,
        y: 326,
    },
    {
        x: 276,
        y: 326,
    },
    {
        x: 277,
        y: 326,
    },
    {
        x: 278,
        y: 326,
    },
    {
        x: 279,
        y: 326,
    },
    {
        x: 280,
        y: 326,
    },
    {
        x: 281,
        y: 326,
    },
    {
        x: 282,
        y: 326,
    },
    {
        x: 283,
        y: 326,
    },
    {
        x: 284,
        y: 326,
    },
    {
        x: 285,
        y: 325,
    },
    {
        x: 286,
        y: 325,
    },
    {
        x: 287,
        y: 325,
    },
    {
        x: 288,
        y: 325,
    },
    {
        x: 289,
        y: 325,
    },
    {
        x: 290,
        y: 324,
    },
    {
        x: 291,
        y: 324,
    },
    {
        x: 292,
        y: 324,
    },
    {
        x: 293,
        y: 324,
    },
    {
        x: 293,
        y: 323,
    },
    {
        x: 294,
        y: 323,
    },
    {
        x: 295,
        y: 323,
    },
    {
        x: 296,
        y: 323,
    },
    {
        x: 297,
        y: 322,
    },
    {
        x: 298,
        y: 322,
    },
    {
        x: 299,
        y: 322,
    },
    {
        x: 299,
        y: 321,
    },
    {
        x: 300,
        y: 321,
    },
    {
        x: 301,
        y: 321,
    },
    {
        x: 301,
        y: 320,
    },
    {
        x: 302,
        y: 320,
    },
    {
        x: 303,
        y: 320,
    },
    {
        x: 304,
        y: 320,
    },
    {
        x: 305,
        y: 320,
    },
    {
        x: 305,
        y: 319,
    },
    {
        x: 306,
        y: 319,
    },
    {
        x: 307,
        y: 319,
    },
    {
        x: 308,
        y: 319,
    },
];
exports.ExpectedLinearizedSample = [
    {
        x: 127,
        y: 152,
    },
    {
        x: 130.8284,
        y: 146.1716,
    },
    {
        x: 135.9289,
        y: 142,
    },
    {
        x: 142.0711,
        y: 138.9289,
    },
    {
        x: 149.2721,
        y: 137,
    },
    {
        x: 156.8579,
        y: 136,
    },
    {
        x: 164.6218,
        y: 135,
    },
    {
        x: 172.6218,
        y: 135,
    },
    {
        x: 180.5562,
        y: 135.2781,
    },
    {
        x: 188.2234,
        y: 137,
    },
    {
        x: 195.5313,
        y: 139.5313,
    },
    {
        x: 202.6681,
        y: 142.834,
    },
    {
        x: 208.5586,
        y: 147.7793,
    },
    {
        x: 214.1456,
        y: 153.1456,
    },
    {
        x: 219.6402,
        y: 158.6402,
    },
    {
        x: 223.2705,
        y: 165.5409,
    },
    {
        x: 227.5833,
        y: 172.1665,
    },
    {
        x: 230.7138,
        y: 179.4275,
    },
    {
        x: 233,
        y: 186.8878,
    },
    {
        x: 234.659,
        y: 194.318,
    },
    {
        x: 236,
        y: 201.8233,
    },
    {
        x: 236,
        y: 209.8233,
    },
    {
        x: 236,
        y: 217.8233,
    },
    {
        x: 233.2965,
        y: 224.7035,
    },
    {
        x: 229.4681,
        y: 230.5319,
    },
    {
        x: 223.4904,
        y: 234,
    },
    {
        x: 216.4904,
        y: 235,
    },
    {
        x: 208.9046,
        y: 234,
    },
    {
        x: 201.8112,
        y: 231.8112,
    },
    {
        x: 194.9757,
        y: 229,
    },
    {
        x: 188.4473,
        y: 225.4473,
    },
    {
        x: 182.2046,
        y: 221.2046,
    },
    {
        x: 177.0833,
        y: 217.0833,
    },
    {
        x: 173.962,
        y: 210.962,
    },
    {
        x: 172,
        y: 203.7747,
    },
    {
        x: 172,
        y: 195.7747,
    },
    {
        x: 176.6949,
        y: 190.3051,
    },
    {
        x: 183.1543,
        y: 188,
    },
    {
        x: 190.7401,
        y: 187,
    },
    {
        x: 198.7401,
        y: 187,
    },
    {
        x: 205.9375,
        y: 188.9375,
    },
    {
        x: 211.7659,
        y: 192.7659,
    },
    {
        x: 217.7157,
        y: 197.7157,
    },
    {
        x: 223.4712,
        y: 203.2356,
    },
    {
        x: 229.0968,
        y: 208.5484,
    },
    {
        x: 234.7806,
        y: 213.7806,
    },
    {
        x: 240.2751,
        y: 219.2751,
    },
    {
        x: 245.932,
        y: 224.932,
    },
    {
        x: 251.3006,
        y: 230.3006,
    },
    {
        x: 256.6692,
        y: 235.6692,
    },
    {
        x: 261.619,
        y: 241.619,
    },
    {
        x: 266.8043,
        y: 247,
    },
    {
        x: 271.8113,
        y: 252.8113,
    },
    {
        x: 277.054,
        y: 258.054,
    },
    {
        x: 283.4195,
        y: 262,
    },
    {
        x: 290.5439,
        y: 264.5439,
    },
    {
        x: 297.5266,
        y: 267,
    },
    {
        x: 305.0544,
        y: 269,
    },
    {
        x: 312.8184,
        y: 270,
    },
    {
        x: 320.5011,
        y: 271.5004,
    },
    {
        x: 328.42,
        y: 272,
    },
    {
        x: 336.42,
        y: 272,
    },
    {
        x: 344.42,
        y: 272,
    },
    {
        x: 352.42,
        y: 272,
    },
    {
        x: 360.42,
        y: 272,
    },
    {
        x: 368.42,
        y: 272,
    },
    {
        x: 376.42,
        y: 272,
    },
    {
        x: 384.42,
        y: 272,
    },
    {
        x: 392.2578,
        y: 271,
    },
    {
        x: 400.0217,
        y: 270,
    },
    {
        x: 407.7856,
        y: 269,
    },
    {
        x: 415.2804,
        y: 266.8598,
    },
    {
        x: 422.4271,
        y: 264,
    },
    {
        x: 429.2564,
        y: 260.7436,
    },
    {
        x: 435.7058,
        y: 257,
    },
    {
        x: 441.6347,
        y: 252,
    },
    {
        x: 446.9843,
        y: 247.0157,
    },
    {
        x: 452.227,
        y: 241.773,
    },
    {
        x: 458.2499,
        y: 237,
    },
    {
        x: 463.4194,
        y: 231.5806,
    },
    {
        x: 467.662,
        y: 225.338,
    },
    {
        x: 470,
        y: 218.3064,
    },
    {
        x: 472,
        y: 211.1349,
    },
    {
        x: 472,
        y: 203.1349,
    },
    {
        x: 472,
        y: 195.1349,
    },
    {
        x: 468.2744,
        y: 188.5488,
    },
    {
        x: 463.4841,
        y: 182.4841,
    },
    {
        x: 457.9895,
        y: 176.9895,
    },
    {
        x: 451.8781,
        y: 172,
    },
    {
        x: 444.9487,
        y: 168.9743,
    },
    {
        x: 437.5929,
        y: 167,
    },
    {
        x: 429.8289,
        y: 166,
    },
    {
        x: 421.8289,
        y: 166,
    },
    {
        x: 414.2432,
        y: 167,
    },
    {
        x: 407.0716,
        y: 169,
    },
    {
        x: 400.3142,
        y: 172,
    },
    {
        x: 393.6867,
        y: 175.3133,
    },
    {
        x: 387.2968,
        y: 179.3516,
    },
    {
        x: 380.7825,
        y: 183.2175,
    },
    {
        x: 375.5399,
        y: 188.4601,
    },
    {
        x: 371.7115,
        y: 194.2885,
    },
    {
        x: 369.2972,
        y: 200.7028,
    },
    {
        x: 368,
        y: 208.1654,
    },
    {
        x: 368,
        y: 216.1654,
    },
    {
        x: 369.4156,
        y: 223.8312,
    },
    {
        x: 371,
        y: 231.531,
    },
    {
        x: 373.5384,
        y: 238.6152,
    },
    {
        x: 376,
        y: 245.7119,
    },
    {
        x: 379.6474,
        y: 252,
    },
    {
        x: 383.5829,
        y: 258,
    },
    {
        x: 387.9477,
        y: 263.9477,
    },
    {
        x: 391.9381,
        y: 269.8762,
    },
    {
        x: 396.4376,
        y: 275.4376,
    },
    {
        x: 399.1447,
        y: 281.1447,
    },
    {
        x: 402,
        y: 287.962,
    },
    {
        x: 403,
        y: 295.5478,
    },
    {
        x: 404,
        y: 303.1336,
    },
    {
        x: 405,
        y: 310.8976,
    },
    {
        x: 405,
        y: 318.8976,
    },
    {
        x: 404,
        y: 326.4833,
    },
    {
        x: 401.5148,
        y: 333.9704,
    },
    {
        x: 397.9798,
        y: 341.0302,
    },
    {
        x: 394,
        y: 347.7805,
    },
    {
        x: 390.3361,
        y: 354.6639,
    },
    {
        x: 385.8099,
        y: 361.1901,
    },
    {
        x: 381.1794,
        y: 367.6412,
    },
    {
        x: 375.6268,
        y: 373.3732,
    },
    {
        x: 370.1673,
        y: 378.9164,
    },
    {
        x: 364.2581,
        y: 384,
    },
    {
        x: 358.4997,
        y: 388.7502,
    },
    {
        x: 352.2155,
        y: 393,
    },
    {
        x: 346.3649,
        y: 397.6351,
    },
    {
        x: 339.7304,
        y: 401.6348,
    },
    {
        x: 332.916,
        y: 405.084,
    },
    {
        x: 325.9514,
        y: 408.0243,
    },
    {
        x: 318.4792,
        y: 410.2604,
    },
    {
        x: 310.7742,
        y: 411.7419,
    },
    {
        x: 303.0522,
        y: 413,
    },
    {
        x: 295.0522,
        y: 413,
    },
    {
        x: 287.0522,
        y: 413,
    },
    {
        x: 279.2578,
        y: 412.1289,
    },
    {
        x: 271.5243,
        y: 411,
    },
    {
        x: 264.3528,
        y: 409,
    },
    {
        x: 256.5888,
        y: 408,
    },
    {
        x: 248.9872,
        y: 406,
    },
    {
        x: 241.4646,
        y: 404.7323,
    },
    {
        x: 234.032,
        y: 402.016,
    },
    {
        x: 226.6971,
        y: 399.1314,
    },
    {
        x: 219.7286,
        y: 395.7286,
    },
    {
        x: 212.7297,
        y: 392.2432,
    },
    {
        x: 205.5519,
        y: 389.184,
    },
    {
        x: 198.8947,
        y: 384.9474,
    },
    {
        x: 191.8986,
        y: 381.4493,
    },
    {
        x: 185.4768,
        y: 378,
    },
    {
        x: 179.53,
        y: 374.0599,
    },
    {
        x: 174.3024,
        y: 369.3024,
    },
    {
        x: 168.9338,
        y: 363.9338,
    },
    {
        x: 163.9841,
        y: 357.9841,
    },
    {
        x: 159.7414,
        y: 351.7414,
    },
    {
        x: 156.2059,
        y: 345.2059,
    },
    {
        x: 153.5266,
        y: 338.0532,
    },
    {
        x: 151,
        y: 331.5917,
    },
    {
        x: 149,
        y: 324.8278,
    },
    {
        x: 148,
        y: 317.242,
    },
    {
        x: 147,
        y: 309.6562,
    },
    {
        x: 147,
        y: 301.6562,
    },
    {
        x: 148.3438,
        y: 295,
    },
    {
        x: 152,
        y: 291.3438,
    },
    {
        x: 157.3644,
        y: 295.3644,
    },
    {
        x: 164.1006,
        y: 299.4004,
    },
    {
        x: 171.3481,
        y: 302.7392,
    },
    {
        x: 178.8398,
        y: 305.5359,
    },
    {
        x: 186.4925,
        y: 307.8308,
    },
    {
        x: 194.082,
        y: 310.3607,
    },
    {
        x: 201.8364,
        y: 312.2624,
    },
    {
        x: 209.6769,
        y: 313.7648,
    },
    {
        x: 217.3993,
        y: 315.8498,
    },
    {
        x: 225.3066,
        y: 317.0438,
    },
    {
        x: 233.2017,
        y: 318.3004,
    },
    {
        x: 241.046,
        y: 319.841,
    },
    {
        x: 248.8962,
        y: 321.3792,
    },
    {
        x: 256.6725,
        y: 323,
    },
    {
        x: 264.2003,
        y: 325,
    },
    {
        x: 271.7861,
        y: 326,
    },
    {
        x: 279.7861,
        y: 326,
    },
    {
        x: 287.3719,
        y: 325,
    },
    {
        x: 293.9577,
        y: 323,
    },
    {
        x: 300.5435,
        y: 321,
    },
    {
        x: 306.5435,
        y: 319,
    },
    {
        x: 308,
        y: 319,
    },
];


/***/ }),

/***/ "./src/vertor-optimizer/cubic-bezier.ts":
/*!**********************************************!*\
  !*** ./src/vertor-optimizer/cubic-bezier.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CubicBezier = void 0;
const vector_1 = __webpack_require__(/*! ./vector */ "./src/vertor-optimizer/vector.ts");
class CubicBezier {
    constructor(p0, p1, p2, p3) {
        this.p0 = p0;
        this.p1 = p1;
        this.p2 = p2;
        this.p3 = p3;
    }
    static from(cubicBezierLike) {
        return new CubicBezier(vector_1.Vector.from(cubicBezierLike.p0), vector_1.Vector.from(cubicBezierLike.p1), vector_1.Vector.from(cubicBezierLike.p2), vector_1.Vector.from(cubicBezierLike.p3));
    }
    sample(t) {
        const ti = 1 - t;
        const t0 = ti * ti * ti;
        const t1 = 3 * ti * ti * t;
        const t2 = 3 * ti * t * t;
        const t3 = t * t * t;
        return this.p0
            .multiply(t0)
            .add(this.p1.multiply(t1))
            .add(this.p2.multiply(t2))
            .add(this.p3.multiply(t3));
    }
}
exports.CubicBezier = CubicBezier;


/***/ }),

/***/ "./src/vertor-optimizer/curve-fit-base.ts":
/*!************************************************!*\
  !*** ./src/vertor-optimizer/curve-fit-base.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurveFitBase = void 0;
const cubic_bezier_1 = __webpack_require__(/*! ./cubic-bezier */ "./src/vertor-optimizer/cubic-bezier.ts");
const vector_1 = __webpack_require__(/*! ./vector */ "./src/vertor-optimizer/vector.ts");
// Copyright (c) 2015 burningmime
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//    claim that you wrote the original software. If you use this software
//    in a product, an acknowledgement in the product documentation would be
//    appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//    misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const MAX_ITERS = 4;
const END_TANGENT_N_PTS = 8;
const MID_TANGENT_N_PTS = 4;
class CurveFitBase {
    constructor() {
        this._u = [];
        this._squaredError = 0;
    }
    fitCurve(first, last, tanL, tanR, curve, split) {
        const result = {
            response: false,
            split: split,
            curve: curve,
        };
        const pts = this._pts;
        const nPts = last - first + 1;
        if (nPts < 2) {
            throw new Error('INTERNAL ERROR: Should always have at least 2 points here');
        }
        else if (nPts == 2) {
            const p0 = pts[first];
            const p3 = pts[last];
            const alpha = p0.distance(p3) / 3;
            const p1 = tanL.multiply(alpha).add(p0);
            const p2 = tanR.multiply(alpha).add(p3);
            curve = new cubic_bezier_1.CubicBezier(p0, p1, p2, p3);
            result.curve = curve;
            split = 0;
            result.split = split;
            result.response = true;
            return result;
        }
        else {
            split = 0;
            result.split = split;
            this.arcLengthParamaterize(first, last);
            curve = null;
            result.curve = curve;
            for (let i = 0; i < MAX_ITERS + 1; i++) {
                if (i != 0) {
                    this.reparameterize(first, last, curve);
                }
                curve = this.generateBezier(first, last, tanL, tanR);
                result.curve = curve;
                const res = this.findMaxSquaredError(first, last, curve, result.split);
                result.split = res.split;
                if (res.response < this._squaredError) {
                    result.response = true;
                    return result;
                }
            }
            result.response = false;
            return result;
        }
    }
    findMaxSquaredError(first, last, curve = null, split = 0) {
        const result = {
            response: 0,
            split: split,
        };
        const pts = this._pts;
        const u = this._u;
        let s = (last - first + 1) / 2;
        const nPts = last - first + 1;
        let max = 0;
        for (let i = 1; i < nPts; i++) {
            const v0 = pts[first + i];
            const v1 = curve.sample(u[i]);
            const d = v0.distanceSquared(v1);
            if (d > max) {
                max = d;
                s = i;
            }
        }
        split = s + first;
        if (split <= first)
            split = first + 1;
        if (split >= last)
            split = last - 1;
        result.split = split;
        result.response = max;
        return result;
    }
    generateBezier(first, last, tanL, tanR) {
        const pts = this._pts;
        const u = this._u;
        const nPts = last - first + 1;
        const p0 = pts[first];
        const p3 = pts[last];
        let c00 = 0;
        let c01 = 0;
        let c11 = 0;
        let x0 = 0;
        let x1 = 0;
        for (let i = 1; i < nPts; i++) {
            const t = u[i];
            const ti = 1 - t;
            const t0 = ti * ti * ti;
            const t1 = 3 * ti * ti * t;
            const t2 = 3 * ti * t * t;
            const t3 = t * t * t;
            const s = p0
                .multiply(t0)
                .add(p0.multiply(t1))
                .add(p3.multiply(t2))
                .add(p3.multiply(t3));
            const v = pts[first + i].subtract(s);
            const a0 = tanL.multiply(t1);
            const a1 = tanR.multiply(t2);
            c00 += a0.dot(a0);
            c01 += a0.dot(a1);
            c11 += a1.dot(a1);
            x0 += a0.dot(v);
            x1 += a1.dot(v);
        }
        const det_C0_C1 = c00 * c11 - c01 * c01;
        const det_C0_X = c00 * x1 - c01 * x0;
        const det_X_C1 = x0 * c11 - x1 * c01;
        const alphaL = det_X_C1 / det_C0_C1;
        const alphaR = det_C0_X / det_C0_C1;
        const linDist = p0.distance(p3);
        const epsilon2 = Number.EPSILON * linDist;
        if (Math.abs(det_C0_C1) < Number.EPSILON ||
            alphaL < epsilon2 ||
            alphaR < epsilon2) {
            const alpha = linDist / 3;
            const p1 = tanL.multiply(alpha).add(p0);
            const p2 = tanR.multiply(alpha).add(p3);
            return new cubic_bezier_1.CubicBezier(p0, p1, p2, p3);
        }
        else {
            const p1 = tanL.multiply(alphaL).add(p0);
            const p2 = tanR.multiply(alphaR).add(p3);
            return new cubic_bezier_1.CubicBezier(p0, p1, p2, p3);
        }
    }
    reparameterize(first, last, curve) {
        const pts = this._pts;
        const u = this._u;
        const nPts = last - first;
        for (let i = 1; i < nPts; i++) {
            const p = pts[first + i];
            const t = u[i];
            const ti = 1 - t;
            const qp0 = curve.p1.subtract(curve.p0).multiply(3);
            const qp1 = curve.p2.subtract(curve.p1).multiply(3);
            const qp2 = curve.p3.subtract(curve.p2).multiply(3);
            const qpp0 = qp1.subtract(qp0).multiply(2);
            const qpp1 = qp2.subtract(qp1).multiply(2);
            const p0 = curve.sample(t);
            const p1 = qp0
                .multiply(ti * ti)
                .add(qp1.multiply(2 * ti * t))
                .add(qp2.multiply(t * t));
            const p2 = qpp0.multiply(ti).add(qpp1.multiply(t));
            const num = (p0.x - p.x) * p1.x + (p0.y - p.y) * p1.y;
            const den = p1.x * p1.x + p1.y * p1.y + (p0.x - p.x) * p2.x + (p0.y - p.y) * p2.y;
            const newU = t - num / den;
            if (Math.abs(den) > Number.EPSILON && newU >= 0 && newU <= 1) {
                u[i] = newU;
            }
        }
    }
    arcLengthParamaterize(first, last) {
        const arclen = this._arclen;
        const u = this._u;
        u.splice(0);
        const diff = arclen[last] - arclen[first];
        const start = arclen[first];
        const nPts = last - first;
        u.push(0);
        for (let i = 1; i < nPts; i++) {
            u.push((arclen[first + i] - start) / diff);
        }
        u.push(1);
    }
    getLeftTangent(last) {
        const pts = this._pts;
        const arclen = this._arclen;
        const totalLen = arclen[arclen.length - 1];
        const p0 = pts[0];
        let tanL = pts[1].subtract(p0).normalize();
        let total = tanL;
        let weightTotal = 1;
        last = Math.min(END_TANGENT_N_PTS, last - 1);
        for (let i = 2; i <= last; i++) {
            const ti = 1 - arclen[i] / totalLen;
            const weight = ti * ti * ti;
            const v = pts[i].subtract(p0).normalize();
            total = total.add(v.multiply(weight));
            weightTotal += weight;
        }
        if (total.length() > Number.EPSILON) {
            tanL = total.divide(weightTotal).normalize();
        }
        return tanL;
    }
    getRightTangent(first) {
        const pts = this._pts;
        const arclen = this._arclen;
        const totalLen = arclen[arclen.length - 1];
        const p3 = pts[pts.length - 1];
        let tanR = pts[pts.length - 2].subtract(p3).normalize();
        let total = tanR;
        let weightTotal = 1;
        first = Math.max(pts.length - (END_TANGENT_N_PTS + 1), first + 1);
        for (let i = pts.length - 3; i >= first; i--) {
            const t = arclen[i] / totalLen;
            const weight = t * t * t;
            const v = pts[i].subtract(p3).normalize();
            total = total.add(v.multiply(weight));
            weightTotal += weight;
        }
        if (total.length() > Number.EPSILON) {
            tanR = total.divide(weightTotal).normalize();
        }
        return tanR;
    }
    getCenterTangent(first, last, split) {
        const pts = this._pts;
        const arclen = this._arclen;
        const splitLen = arclen[split];
        const pSplit = pts[split];
        const firstLen = arclen[first];
        let partLen = splitLen - firstLen;
        let total = new vector_1.Vector(0, 0);
        let weightTotal = 0;
        for (let i = Math.max(first, split - MID_TANGENT_N_PTS); i < split; i++) {
            const t = (arclen[i] - firstLen) / partLen;
            const weight = t * t * t;
            const v = pts[i].subtract(pSplit).normalize();
            total = total.add(v.multiply(weight));
            weightTotal += weight;
        }
        let tanL = total.length() > Number.EPSILON && weightTotal > Number.EPSILON
            ? total.divide(weightTotal).normalize()
            : pts[split - 1].subtract(pSplit).normalize();
        partLen = arclen[last] - splitLen;
        const rMax = Math.min(last, split + MID_TANGENT_N_PTS);
        total = new vector_1.Vector(0, 0);
        weightTotal = 0;
        for (let i = split + 1; i <= rMax; i++) {
            const ti = 1 - (arclen[i] - splitLen) / partLen;
            const weight = ti * ti * ti;
            const v = pSplit.subtract(pts[i]).normalize();
            total = total.add(v.multiply(weight));
            weightTotal += weight;
        }
        let tanR = total.length() > Number.EPSILON && weightTotal > Number.EPSILON
            ? total.divide(weightTotal).normalize()
            : pSplit.subtract(pts[split + 1]).normalize();
        total = tanL.add(tanR);
        if (total.lengthSquared() < Number.EPSILON) {
            tanL = pts[split - 1].subtract(pSplit).normalize();
            tanR = pSplit.subtract(pts[split + 1]).normalize();
            total = tanL.add(tanR);
            return total.lengthSquared() < Number.EPSILON
                ? tanL
                : total.divide(2).normalize();
        }
        else {
            return total.divide(2).normalize();
        }
    }
}
exports.CurveFitBase = CurveFitBase;


/***/ }),

/***/ "./src/vertor-optimizer/curve-fit.ts":
/*!*******************************************!*\
  !*** ./src/vertor-optimizer/curve-fit.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CurveFit = exports.generateArcLengths = exports.fit = void 0;
const curve_fit_base_1 = __webpack_require__(/*! ./curve-fit-base */ "./src/vertor-optimizer/curve-fit-base.ts");
const vector_1 = __webpack_require__(/*! ./vector */ "./src/vertor-optimizer/vector.ts");
// Copyright (c) 2015 burningmime
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//    claim that you wrote the original software. If you use this software
//    in a product, an acknowledgement in the product documentation would be
//    appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//    misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const END_TANGENT_N_PTS = 8;
const NO_CURVES = [];
function fit(points) {
    const arcLen = generateArcLengths(points);
    return [];
}
exports.fit = fit;
function generateArcLengths(points) {
    const results = [];
    results.push(0);
    let clen = 0;
    let pp = points[0];
    for (let i = 1; i < points.length; i++) {
        const np = points[i];
        clen += vector_1.Vector.from(pp).distance(vector_1.Vector.from(np));
        results.push(clen);
        pp = np;
    }
    return results;
}
exports.generateArcLengths = generateArcLengths;
class CurveFit extends curve_fit_base_1.CurveFitBase {
    constructor(_pts) {
        super();
        this._pts = _pts;
        this._result = [];
        const arclen = [];
        arclen.push(0);
        let clen = 0;
        let pp = this._pts[0];
        for (let i = 1; i < this._pts.length; i++) {
            const np = this._pts[i];
            clen += vector_1.Vector.from(pp).distance(vector_1.Vector.from(np));
            arclen.push(clen);
            pp = np;
        }
        this._arclen = arclen;
    }
    fit(maxError) {
        if (maxError < Number.EPSILON) {
            throw new Error('maxError cannot be negative/zero/less than epsilon value');
        }
        if (!this._pts) {
            throw new Error('points');
        }
        if (this._pts.length < 2) {
            return NO_CURVES;
        }
        this._squaredError = maxError * maxError;
        const last = this._pts.length - 1;
        const tanL = this.getLeftTangent(last);
        const tanR = this.getRightTangent(0);
        this.fitRecursive(0, last, tanL, tanR);
        return this._result;
    }
    fitRecursive(first = 0, last = 0, tanL, tanR) {
        let split = 0;
        let curve = null;
        const fitCurveResult = this.fitCurve(first, last, tanL, tanR, curve, split);
        split = fitCurveResult.split;
        curve = fitCurveResult.curve;
        if (fitCurveResult.response) {
            this._result.push(curve);
        }
        else {
            const tanM1 = this.getCenterTangent(first, last, split);
            const tanM2 = new vector_1.Vector(-tanM1.x, -tanM1.y);
            if (first == 0 && split < END_TANGENT_N_PTS) {
                tanL = this.getLeftTangent(split);
            }
            if (last == this._pts.length - 1 &&
                split > this._pts.length - (END_TANGENT_N_PTS + 1)) {
                tanR = this.getRightTangent(split);
            }
            // do actual recursion
            this.fitRecursive(first, split, tanL, tanM1);
            this.fitRecursive(split, last, tanM2, tanR);
        }
    }
}
exports.CurveFit = CurveFit;


/***/ }),

/***/ "./src/vertor-optimizer/curve-preprocess.ts":
/*!**************************************************!*\
  !*** ./src/vertor-optimizer/curve-preprocess.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.perpendicularDistance = exports.rdpRecursive = exports.rdpReduce = exports.removeDuplicates = exports.linearize = void 0;
// Copyright (c) 2015 burningmime
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//    claim that you wrote the original software. If you use this software
//    in a product, an acknowledgement in the product documentation would be
//    appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//    misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
function linearize(src, minDistance, alwaysKeepLastVertex = false, alwaysLinearizeAllVertexes = true) {
    const dist = [];
    if (src === null) {
        throw new Error('Source vector array is null');
    }
    if (minDistance <= Number.EPSILON) {
        throw new Error(`md ${minDistance}' is be less than epsilon ${Number.EPSILON}`);
    }
    if (src.length > 0) {
        let pp = src[0];
        dist.push(pp);
        let cd = 0;
        for (let ip = 1; ip < src.length; ip++) {
            const p0 = src[ip - 1];
            const p1 = src[ip];
            const td = p0.distance(p1);
            if (cd + td > minDistance) {
                const pd = minDistance - cd;
                dist.push(p0.lerp(p1, pd / td));
                let rd = td - pd;
                while (rd > minDistance) {
                    rd -= minDistance;
                    if (alwaysLinearizeAllVertexes) {
                        const np = p0.lerp(p1, (td - rd) / td);
                        if (!np.equalsOrClose(pp)) {
                            dist.push(np);
                            pp = np;
                        }
                    }
                }
                cd = rd;
            }
            else {
                cd += td;
            }
        }
        const lp = src[src.length - 1];
        if (alwaysKeepLastVertex || !pp.equalsOrClose(lp)) {
            dist.push(lp);
        }
    }
    return dist;
}
exports.linearize = linearize;
function removeDuplicates(pts) {
    if (pts.length < 2) {
        return pts;
    }
    let prev = pts[0];
    const len = pts.length;
    let nDup = 0;
    for (let i = 1; i < len; i++) {
        const cur = pts[i];
        if (prev.equalsOrClose(cur))
            nDup++;
        else
            prev = cur;
    }
    if (nDup == 0) {
        return pts;
    }
    else {
        const dst = [];
        prev = pts[0];
        dst.push(prev);
        for (let i = 1; i < len; i++) {
            const cur = pts[i];
            if (!prev.equalsOrClose(cur)) {
                dst.push(cur);
                prev = cur;
            }
        }
        return dst;
    }
}
exports.removeDuplicates = removeDuplicates;
/// <summary>
/// "Reduces" a set of line segments by removing points that are too far away. Does not modify the input list; returns
/// a new list with the points removed.
/// The image says it better than I could ever describe: http://upload.wikimedia.org/wikipedia/commons/3/30/Douglas-Peucker_animated.gif
/// The wiki article: http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm
/// Based on:  http://www.codeproject.com/Articles/18936/A-Csharp-Implementation-of-Douglas-Peucker-Line-Ap
/// </summary>
/// <param name="pts">Points to reduce</param>
/// <param name="error">Maximum distance of a point to a line. Low values (~2-4) work well for mouse/touchscreen data.</param>
/// <returns>A new list containing only the points needed to approximate the curve.</returns>
function rdpReduce(pts, error) {
    if (pts == null)
        throw new Error('pts');
    pts = removeDuplicates(pts);
    if (pts.length < 3) {
        return [...pts];
    }
    const keepIndex = [];
    keepIndex.push(0);
    keepIndex.push(pts.length - 1);
    rdpRecursive(pts, error, 0, pts.length - 1, keepIndex);
    keepIndex.sort();
    const res = [];
    // ReSharper disable once LoopCanBeConvertedToQuery
    keepIndex.forEach((i) => res.push(pts[i]));
    return res;
}
exports.rdpReduce = rdpReduce;
function rdpRecursive(pts, error, first, last, keepIndex) {
    const nPts = last - first + 1;
    if (nPts < 3) {
        return;
    }
    const a = pts[first];
    const b = pts[last];
    const abDist = a.distance(b);
    const aCrossB = a.x * b.y - b.x * a.y;
    let maxDist = error;
    let split = 0;
    for (let i = first + 1; i < last - 1; i++) {
        const p = pts[i];
        const pDist = perpendicularDistance(a, b, abDist, aCrossB, p);
        if (pDist > maxDist) {
            maxDist = pDist;
            split = i;
        }
    }
    if (split != 0) {
        keepIndex.push(split);
        rdpRecursive(pts, error, first, split, keepIndex);
        rdpRecursive(pts, error, split, last, keepIndex);
    }
}
exports.rdpRecursive = rdpRecursive;
/// <summary>
/// Finds the shortest distance between a point and a line. See: http://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line
/// </summary>
/// <param name="a">First point of the line.</param>
/// <param name="b">Last point of the line.</param>
/// <param name="abDist">Distance between a and b (length of the line).</param>
/// <param name="aCrossB">"a.X*b.Y - b.X*a.Y" This would be the Z-component of (⟪a.X, a.Y, 0⟫ ⨯ ⟪b.X, b.Y, 0⟫) in 3-space.</param>
/// <param name="p">The point to test.</param>
/// <returns>The perpendicular distance to the line.</returns>
function perpendicularDistance(a, b, abDist, aCrossB, p) {
    // a profile with the test data showed that originally this was eating up ~44% of the runtime. So, this went through
    // several iterations of optimization and staring at the disassembly. I tried different methods of using cross
    // products, doing the computation with larger vector types, etc... this is the best I could do in ~45 minutes
    // running on 3 hours of sleep, which is all scalar math, but RyuJIT puts it into XMM registers and does
    // ADDSS/SUBSS/MULSS/DIVSS because that's what it likes to do whenever it sees a vector in a function.
    const area = Math.abs(aCrossB + b.x * p.y + p.x * a.y - p.x * b.y - a.x * p.y);
    const height = area / abDist;
    return height;
}
exports.perpendicularDistance = perpendicularDistance;


/***/ }),

/***/ "./src/vertor-optimizer/vector.ts":
/*!****************************************!*\
  !*** ./src/vertor-optimizer/vector.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Vector = void 0;
class Vector {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
    static from(point) {
        return new Vector(point.x, point.y);
    }
    add(a) {
        return new Vector(this.x + (a instanceof Vector ? a.x : a), this.y + (a instanceof Vector ? a.y : a));
    }
    subtract(a) {
        return new Vector(this.x - (a instanceof Vector ? a.x : a), this.y - (a instanceof Vector ? a.y : a));
    }
    multiply(a) {
        return new Vector(this.x * (a instanceof Vector ? a.x : a), this.y * (a instanceof Vector ? a.y : a));
    }
    divide(a) {
        return new Vector(this.x / (a instanceof Vector ? a.x : a), this.y / (a instanceof Vector ? a.y : a));
    }
    distance(a) {
        return Math.sqrt(this.distanceSquared(a));
    }
    distanceSquared(a) {
        const x = this.x - a.x;
        const y = this.y - a.y;
        return x * x + y * y;
    }
    lerp(v, fraction) {
        return new Vector(this.x + (v.x - this.x) * fraction, this.y + (v.y - this.y) * fraction);
    }
    equalsOrClose(a) {
        return this.distanceSquared(a) < Number.EPSILON;
    }
    dot(a) {
        return this.x * a.x + this.y * a.y;
    }
    lengthSquared() {
        return this.x * this.x + this.y * this.y;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    normalize() {
        return this.divide(this.length());
    }
}
exports.Vector = Vector;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
!function() {
var exports = __webpack_exports__;
/*!************************!*\
  !*** ./sample/main.ts ***!
  \************************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
const drawer_1 = __webpack_require__(/*! ./drawer */ "./sample/drawer.ts");
const $svg = document.getElementById('svg-root');
let preprocessMode = drawer_1.PreprocessMode.NONE;
let renderMode = drawer_1.RenderMode.ORIGINAL_POINTS;
let colorize = true;
let linearizePointDistance = 8;
let ramerDouglaspeucherError = 1;
let curveFittingError = 8;
const $preprocessModes = document.getElementsByName('preprocess-mode');
$preprocessModes.forEach(($preprocessMode) => $preprocessMode.addEventListener('click', (e) => {
    const target = e.target;
    if (target.checked) {
        preprocessMode = target.value;
        onValueChanged();
    }
}));
const $renderModes = document.getElementsByName('render-mode');
$renderModes.forEach(($renderMode) => $renderMode.addEventListener('click', (e) => {
    const target = e.target;
    if (target.checked) {
        renderMode = target.value;
        onValueChanged();
    }
}));
const $colorize = document.getElementById('colorize');
$colorize.addEventListener('click', (e) => {
    colorize = !!$colorize.checked;
    onValueChanged();
});
const $linearizePointDistanceDisplay = document.getElementById('linearize-point-distance');
const $linearizePointDistance = document.getElementById('linearize-point-distance-slider');
$linearizePointDistance.addEventListener('input', (e) => {
    const target = e.target;
    const value = Number(target.value);
    $linearizePointDistanceDisplay.innerHTML = target.value;
    linearizePointDistance = value;
    onValueChanged();
});
const $curveFittingErrorDisplay = document.getElementById('curve-fitting-error');
const $curveFittingError = document.getElementById('curve-fitting-error-slider');
$curveFittingError.addEventListener('input', (e) => {
    const target = e.target;
    const value = Number(target.value);
    $curveFittingErrorDisplay.innerHTML = target.value;
    curveFittingError = value;
    onValueChanged();
});
const $ramerDouglaspeucherErrorDisplay = document.getElementById('ramer-douglas-peucher-error');
const $ramerDouglaspeucherError = document.getElementById('ramer-douglas-peucher-error-slider');
$ramerDouglaspeucherError.addEventListener('input', (e) => {
    const target = e.target;
    const value = Number(target.value);
    $ramerDouglaspeucherErrorDisplay.innerHTML = target.value;
    ramerDouglaspeucherError = value;
    onValueChanged();
});
const drawer = new drawer_1.Drawer($svg);
function onValueChanged() {
    drawer.options = {
        renderMode: renderMode,
        preprocessMode: preprocessMode,
        linearizePointDistance: linearizePointDistance,
        curveFittingError: curveFittingError,
        rdpError: ramerDouglaspeucherError,
        colorize: colorize,
    };
}

}();
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=vector-optimizer.min.js.map